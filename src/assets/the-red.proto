/*
 the-red.proto

 2023-12-22 jason:
  - add clean2, clean3
 
 2023-12-08 jason:
  - delete Gate params
 
 2023-11-27 jason:
  - only clean amp is used

 2023-11-24 jason:
  - add field : Nack.receivedData
  - add messages : add amps

 2023-11-21 jason:
  - add field : BankData.knobNumber

 2023-11-09 jason:
  - add messsage : ReqDisconnect, ReqGuitarName, ResGuitarName
  - add field : InitFromApp.isLastPaired
  - add comments for not used fields in InitFromGuitar

 2023-11-01 jason:
  - add field : Reverb.predelay
  - delete field : Reverb.tone

 2023-10-31 jason:
  - edit param messages : update refer to the sheet
    https://docs.google.com/spreadsheets/d/1QSmZDizQzOxEic-TGab6f1iLtOGOQspwF0OkpvGIPfM/edit#gid=0
  - add fields: Nack.receivedMessageLength, Nack.receivedMessageId
  - add messages: InitKnobMatching1/2/3, ReqInitFromGuitar

 2023-10-10 jason:
  - add message : SingleParam
  - add field : CategoryData.isOn

 2023-10-10 jason:
  - add field : ParamEfxAcoustic.level

 2023-09-27 jason:
  - add message : ParamEfxTScreamer
  - add message : ParamEfxRatt
  - add message : ParamEfxSupremeOverdrive
  - add fields : level in ParamAmp*
  - delete fields : level in ParamCab*

 2023-09-20 jason:
  - add message : KnobMatchingAll
  - change field names : BankData.data -> categoryData
  - change field names : KnobMatching.data -> knobMatchingData

 2023-09-19 jason:
  - add messages : CategoryData, BankData, KnobMatching

 2023-09-14 jason:
  - delete message & message ID : CurrentKnobSelected

 2023-09-11 jason:
  - add field : InitFromGuitar.receivedMessageLength
  - add field : InitFromGuitar.receivedMessageId
  - add enum : MessageID::CLEAR_EFFECTS

 2023-09-08 jason:
  - add field : Ack.receivedMessageId

 2023-09-07 jason:
  - add field : InitFromApp.knobClicked
  - add field : InitFromGuitar.isCharging
  - add message : ClearEffects

 2023-09-06 jason:
  - delete messages : Select XXX
  - add fields in Param XXX : bool isOn
  - add enum : ERROR_CODE::INVALID_PACKET_LENGTH

 2023-09-05 jason:
  - delete message : EffectEod
  - delete message : ChangeSsid
  - delete field : InitFromApp.currentTime
  - add field : InitFromGuitar.batteryLeve
  - add field : BatteryLevel.isCharging

 2023-08-30 jason:
  - delete message : ParamCabAcoustic
  - add message : ParamEfxAcoustic
  - change AMP names to F, MA, V, ME, B
  - change CAB names to A, B, C, D, E

 2023-08-29 jason:
  - change parameter names in EFX : drive -> gain
  - change parameter names in MOD : frequency -> rate
  - change parameter names : wet -> mix

 2023-08-28 jason:
  - add NACK error codes
  - add message : ParamGate
  - delete Gate messages : (ParamGateNoiseGate, ParamGateLimiter,
 ParamGateCompressor)
  - delete message : ParamEfxBitCrusher
  - delete message : ParamDelayEcho
  - change parameter name in EFX : ParamModVibrato.percent -> depth
  - change parameter name : ParamModVibrato.percent -> depth
  - change parameter name : ParamDelayDelay.gap -> time
  - change parameter name : ParamModChorus.voices -> rate
  - change parameter name "treble" to "tone" in ParamAmps (ParamAmpFender,
 ParamAmpMarshall, ParamAmpVox, ParamAmpAcoustic)
  - delete parameter "presence" in ParamAmps (ParamAmpFender, ParamAmpMarshall,
 ParamAmpVox, ParamAmpAcoustic)
  - Change and rearrange Message IDs

 2023-08-02 jason: initial version
*/
syntax = "proto3";

enum MessageID {
  INVALID = 0;
  ACK = 1;
  NACK = 2;
  INIT_FROM_APP = 3;
  INIT_FROM_GUITAR = 4;
  REQ_INIT_FROM_GUITAR = 5;
  CHANGE_GUITAR_NAME = 6;
  TUNER_ON_OFF = 7;
  TUNER_FREQUENCY = 8;
  KNOB_CLICKED = 9;
  KNOB_MATCHING_START = 10;
  BATTERY_LEVEL = 11;
  PARAM_GATE = 12;
  PARAM_EFX_TS90 = 13;
  PARAM_EFX_SD10 = 14;
  PARAM_EFX_RAT = 15;
  PARAM_EFX_DISTORTION = 16;
  PARAM_EFX_AUTOWAH = 17;
  PARAM_EFX_ACOUSTIC = 18;
  PARAM_AMP_FD = 19;
  PARAM_AMP_MS = 20;
  PARAM_AMP_MSBG = 21;
  PARAM_AMP_VX = 22;
  PARAM_AMP_BGN = 23;
  PARAM_CAB_A = 24;
  PARAM_CAB_B = 25;
  PARAM_CAB_C = 26;
  PARAM_CAB_D = 27;
  PARAM_CAB_E = 28;
  PARAM_MOD_CHORUS = 29;
  PARAM_MOD_TREMOLO = 30;
  PARAM_MOD_PHASER = 31;
  PARAM_MOD_VIBRATO = 32;
  PARAM_DELAY_DELAY = 33;
  PARAM_REVERB = 34;
  CATEGORY_DATA = 35;
  BANK_DATA = 36;
  KNOB_MATCHING = 37;
  INIT_KNOB_MATCHING1 = 38;
  INIT_KNOB_MATCHING2 = 39;
  INIT_KNOB_MATCHING3 = 40;
  KNOB_MATCHING_ALL = 41;
  CLEAR_EFFECTS = 42;
  SINGLE_PARAM = 43;
  DIAG_REQ = 44;
  DIAG_RESP_POC = 45;
  DIAG_RESP_FIRST_PARING = 46;
  DIAG_RESP_ERR_CODE = 47;
  BULK_IR_START_REQ = 48;
  BULK_IR_REQ = 49;
  BULK_IR_END_REQ = 50;
  BULK_IR_RES = 51;
  REQ_DISCONNECT = 52;
  REQ_GUITAR_NAME = 53;
  RES_GUITAR_NAME = 54;
  REQ_PLAY_PAIRING_SOUND = 55;
  REQ_BOOTLOAD_MODE = 56;
  REQ_IS_BOOTLOAD_MODE = 57;
  RES_IS_BOOTLOAD_MODE = 58;
  PARAM_AMP_CLEAN = 59;
  PARAM_AMP_CLEAN2 = 60;
  PARAM_AMP_CLEAN3 = 61;
  PARAM_AMP_CLEAN4 = 62;
  PARAM_AMP_CLEAN5 = 63;
  PARAM_AMP_CLEAN6 = 64;
  PARAM_AMP_CLEAN7 = 65;
}

enum CATEGORY_NUMBER {
  CAT_NO1_GATE = 0;
  CAT_NO2_EFX = 1;
  CAT_NO3_AMP = 2;
  CAT_NO4_CAB = 3;
  CAT_NO5_MOD = 4;
  CAT_NO6_DELAY = 5;
  CAT_NO7_REVERB = 6;
}

enum CATEGORY1_GATE_SELECT {
  GATE_GATE = 0;
  NUMBER_OF_GATE = 1;
}

enum CATEGORY2_EFX_SELECT {
  EFX_TS90 = 0;
  EFX_SD10 = 1;
  EFX_RAT = 2;
  EFX_DISTORTION = 4;
  EFX_AUTOWAH = 5;
  EFX_ACOUSTIC = 6;
  NUMBER_OF_EFX = 7;
}

enum CATEGORY3_AMP_SELECT {
  AMP_FD = 0;
  AMP_MS = 1;
  AMP_MSBG = 2;
  AMP_VX = 3;
  AMP_BGN = 4;
  NUMBER_OF_AMP = 5;
}

enum CATEGORY4_CAB_SELECT {
  CAB_A = 0;
  CAB_B = 1;
  CAB_C = 2;
  CAB_D = 3;
  CAB_E = 4;
  NUMBER_OF_CAB = 5;
}

enum CATEGORY5_MOD_SELECT {
  MOD_CHORUS = 0;
  MOD_TREMOLO = 1;
  MOD_PHASER = 2;
  MOD_VIBRATO = 3;
  NUMBER_OF_MOD = 4;
}

enum CATEGORY6_DELAY_SELECT {
  DELAY_DELAY = 0;
  NUMBER_OF_DELAY = 1;
}

enum CATEGORY7_REVERB_SELECT {
  REVERB_REVERB = 0;
  NUMBER_OF_REVERB = 1;
}

message Ack {
  int32 receivedMessageLength = 1;
  int32 receivedMessageId = 2;
}

message Nack {
  enum ERROR_CODE {
    INVALID_MESSAGE_ID = 0;
    INVALID_MESSAGE_DATA = 1;
    INVALID_STATE = 2;
    INVALID_OPCODE = 3;
    INVALID_PACKET_LENGTH = 4;
    PROTOBUF_DECODE_ERROR = 5;
    TIMEOUT = 6;
  }
  int32 receivedMessageLength = 1;
  int32 receivedMessageId = 2;
  ERROR_CODE errorCode = 3;
}

message InitFromApp {
  string appVersion = 1;
  int32 KnobClicked = 2;
  bool playPairingSound = 3;
}

// guitar model name mapping
// "1r": "TR1 Pop Red"
// "1g": "TR1 Forest Green"
// "1i": "TR1 Creamy Ivory"
// "1b": "TR1 Jet Black"
message InitFromGuitar {
  int32 receivedMessageLength = 1; // not used
  int32 receivedMessageId = 2;     // not used
  string guitarName = 3;
  string guitarModelName = 4;
  string firmwareVersion = 5;
  int32 batteryLevel = 6;
  bool isCharging = 7;
}

message ReqInitFromGuitar { bool request = 1; }

message ChangeGuitarName { string guitarName = 1; }

message TunerOnOff { bool isOn = 1; }
message TunerFrequency { float tunerFrequency = 1; }

// Knob number 0 is clear
message KnobClicked { int32 knobNumber = 1; }

message KnobMatchingStart { int32 knobNumber = 1; }

message BatteryLevel {
  int32 batteryLevel = 1;
  bool isCharging = 2;
}

message ParamGate {
  bool isOn = 1;
  int32 noiseGateThreshold = 2;
  int32 compressorThreshold = 3;
  int32 compressorRatio = 4;
}

message ParamEfxTs90 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 tone = 4;
}

message ParamEfxSd10 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 tone = 4;
}

message ParamEfxRat {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 tone = 4;
}

message ParamEfxDistortion {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 tone = 4;
}

message ParamEfxAutowah {
  bool isOn = 1;
  int32 level = 2;
}

message ParamEfxAcoustic {
  bool isOn = 1;
  int32 level = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
}

message ParamAmpFd {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpMs {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpMsbg {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpVx {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpBgn {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamCabA { bool isOn = 1; }
message ParamCabB { bool isOn = 1; }
message ParamCabC { bool isOn = 1; }
message ParamCabD { bool isOn = 1; }
message ParamCabE { bool isOn = 1; }

message ParamModChorus {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamModTremolo {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamModPhaser {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamModVibrato {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamDelayDelay {
  bool isOn = 1;
  int32 time = 2;
  int32 level = 3;
  int32 feedback = 4;
}

message ParamReverb {
  bool isOn = 1;
  int32 predelay = 2;
  int32 decay = 3;
  int32 mix = 4;
}

message CategoryData {
  bool isOn = 1;
  int32 categoryNumber = 2;
  int32 select = 3;
  repeated int32 params = 4;
}

message BankData {
  repeated CategoryData categoryData = 1;
  int32 knobNumber = 2;
}

message KnobMatching {
  int32 knobNumber = 1;
  BankData bankData = 2;
}

message InitKnobMatching1 { BankData bankData = 1; }
message InitKnobMatching2 { BankData bankData = 1; }
message InitKnobMatching3 { BankData bankData = 1; }

// message length is too long to send at once
message KnobMatchingAll { repeated KnobMatching knobMatchingData = 1; }

message ClearEffects { bool clear = 1; }

message SingleParam {
  int32 categoryIndex = 1;
  int32 selectIndex = 2;
  int32 parameterIndex = 3;
  int32 value = 4;
}

// App -> Guitar
enum DiagCode {
  POWER_ON_COUNT = 0;
  FIRST_PAIRING = 1;
  ERROR_CODE = 2;
}

message DiagReq { DiagCode code = 1; }

// Guitar -> App

message DiagRespPOC { int32 powerOnCount = 1; }
message DiagRespFirstParing { int64 FirstParingTimeEpoch = 1; }

message DiagRespErrCode {
  enum ErrorCode {
    DIAG_ERR_UNKNOWN_DIAG_ID = 0;
    DIAG_ERR_INVALID_DIAG_DATA = 1;
  }

  int32 errCode = 1;
}

// Save IR Request
message BulkIrStartReq {
  string irName = 1;
  int32 sequenceNumber = 2;
  repeated float data = 3;
}

message BulkIrReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

message BulkIrEndReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

// Save IR Response
message BulkIrRes {
  int32 sequenceNumber = 1;
  bool done = 2;
}

message ReqDisconnect { bool forgetMe = 1; }

message ReqGuitarName { bool request = 1; }

message ResGuitarName { string guitarName = 1; }

message ReqPlayPairingSound { bool request = 1; }

message ReqBootloadMode { bool request = 1; }

message ReqIsBootloadMode { bool request = 1; }

message ResIsBootloadMode { bool isBootloadMode = 1; }

message ParamAmpClean {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpClean2 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}

message ParamAmpClean3 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}


message ParamAmpClean4 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}


message ParamAmpClean5 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}


message ParamAmpClean6 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}


message ParamAmpClean7 {
  bool isOn = 1;
  int32 level = 2;
  int32 gain = 3;
  int32 bass = 4;
  int32 middle = 5;
  int32 treble = 6;
}
