// the-red.proto

/*

 2023-08-29 jason:
  - change parameter names in EFX : drive -> gain

 2023-08-28 jason:
  - add NACK error codes
  - add message ParamGate
  - delete Gate messages (ParamGateNoiseGate, ParamGateLimiter, ParamGateCompressor)
  - delete message ParamEfxBitCrusher
  - delete message ParamDelayEcho
  - change parameter name in EFX : ParamModVibrato.percent -> depth
  - change parameter name : ParamModVibrato.percent -> depth
  - change parameter name : ParamDelayDelay.gap -> time
  - change parameter name : ParamModChorus.voices -> rate
  - change parameter name "treble" to "tone" in ParamAmps (ParamAmpFender, ParamAmpMarshall, ParamAmpVox, ParamAmpAcoustic)
  - delete parameter "presence" in ParamAmps (ParamAmpFender, ParamAmpMarshall, ParamAmpVox, ParamAmpAcoustic)
  - Change and rearrange Message IDs

 2023-08-02 jason: initial version
*/
syntax = "proto3";

enum MessageID {
  MessageID_ACK = 0;
  MessageID_NACK = 1;
  MessageID_REQ_SETUP_INFO = 2;
  MessageID_INIT_FROM_APP = 3;
  MessageID_INIT_FROM_GUITAR = 4;
  MessageID_CHANGE_GUITAR_NAME = 5;
  MessageID_TUNER_ON_OFF = 6;
  MessageID_TUNER_FREQUENCY = 7;
  MessageID_KNOB_CLICKED = 8;
  MessageID_KNOB_MATCHING_START = 9;
  MessageID_EFFECT_EOD = 10;
  MessageID_BATTERY_LEVEL = 11;
  MessageID_CURRENT_KNOB_SELECTED = 12;
  MessageID_SELECT_GATE = 13;
  MessageID_SELECT_EFX = 14;
  MessageID_SELECT_AMP = 15;
  MessageID_SELECT_CAB = 16;
  MessageID_SELECT_MOD = 17;
  MessageID_SELECT_DELAY = 18;
  MessageID_SELECT_REVERB = 19;
  MessageID_PARAM_GATE = 20;
  MessageID_PARAM_EFX_OVERDRIVE = 21;
  MessageID_PARAM_EFX_DISTORTION = 22;
  MessageID_PARAM_EFX_FUZZ = 23;
  MessageID_PARAM_AMP_FENDER = 24;
  MessageID_PARAM_AMP_MARSHALL = 25;
  MessageID_PARAM_AMP_VOX = 26;
  MessageID_PARAM_AMP_ACOUSTIC = 27;
  MessageID_PARAM_IR_FENDER = 28;
  MessageID_PARAM_IR_MARSHALL = 29;
  MessageID_PARAM_IR_VOX = 30;
  MessageID_PARAM_IR_ACOUSTIC = 31;
  MessageID_PARAM_MOD_FLANGE = 32;
  MessageID_PARAM_MOD_CHORUS = 33;
  MessageID_PARAM_MOD_TREMOLO = 34;
  MessageID_PARAM_MOD_PHASER = 35;
  MessageID_PARAM_MOD_VIBRATO = 36;
  MessageID_PARAM_DELAY_DELAY = 37;
  MessageID_PARAM_REVERB_ROOM = 38;
  MessageID_PARAM_REVERB_HALL = 39;
  MessageID_PARAM_REVERB_PLATE = 40;
  MessageID_PARAM_REVERB_SPRING = 41;
  MessageID_DIAG_REQ = 42;
  MessageID_DIAG_RESP_POC = 43;
  MessageID_DIAG_RESP_FIRST_PARING = 44;
  MessageID_DIAG_RESP_ERR_CODE = 45;
  MessageID_BULK_IR_START_REQ = 46;
  MessageID_BULK_IR_REQ = 47;
  MessageID_BULK_IR_END_REQ = 48;
  MessageID_BULK_IR_RES = 49;
}

message Ack { int32 receivedMessageLength = 1; }

message Nack {
  enum ERROR_CODE {
    INVALID_MESSAGE_ID = 0;
    INVALID_MESSAGE_DATA = 1;
    INVALID_STATE = 2;
    PROTOBUF_DECODE_ERROR = 3;
    TIMEOUT = 4;
  }
  ERROR_CODE errorCode = 1;
}

// App -> Guitar
message ReqSetupInfo {}

message InitFromApp {
  int64 currentTimeEpoch = 1;
  string phoneMachineId = 2;
  string appVersion = 3;
}

message InitFromGuitar {
  string guitarName = 1;
  string guitarModelName = 2;
  string firmwareVersion = 3;
}

message ChangeGuitarName { string guitarName = 1; }

message TunerOnOff { bool isOn = 1; }
message TunerFrequency { float tunerFrequency = 1; }

// Knob number 0 is clear
message KnobClicked { int32 knobNumber = 1; }

message KnobMatchingStart { int32 knobNumber = 1; }

message EffectEod { bool effectEod = 1; }

message BatteryLevel { int32 batteryLevel = 1; }

message CurrentKnobSelected { int32 currentKnobSelected = 1; }

message SelectGate {
  enum CategoryGate {
    NOISE_GATE = 0;
  }
  CategoryGate target = 1;
  bool isOn = 2;
}

message SelectEfx {
  enum CategoryEfx {
    OVERDRIVE = 0;
    DISTORTION = 1;
    FUZZ = 2;
  }
  CategoryEfx target = 1;
  bool isOn = 2;
}

message SelectAmp {
  enum CategoryAmp {
    FENDER = 0;
    MARSHALL = 1;
    VOX = 2;
    ACOUSTIC = 3;
  }
  CategoryAmp target = 1;
  bool isOn = 2;
}

message SelectCab {
  enum CategoryCab {
    FENDER = 0;
    MARSHALL = 1;
    VOX = 2;
    ACOUSTIC = 3;
  }
  CategoryCab target = 1;
  bool isOn = 2;
}

message SelectMod {
  enum CategoryMod {
    FLANGE = 0;
    CHORUS = 1;
    TREMOLO = 2;
    PHASER = 3;
    VIBRATO = 4;
  }
  CategoryMod target = 1;
  bool isOn = 2;
}

message SelectDelay {
  enum CategoryDelay {
    DELAY = 0;
  }
  CategoryDelay target = 1;
  bool isOn = 2;
}

message SelectReverb {
  enum CategoryReverb {
    ROOM = 0;
    HALL = 1;
    PLATE = 2;
  }
  CategoryReverb target = 1;
  bool isOn = 2;
}

message ParamGate {
  int32 noiseGateThreshold = 1;
  int32 noiseGateOpeningTime = 2;
  int32 noiseGateClosingTime = 3;
  int32 noiseGateHoldTime = 4;
  int32 compressorThreshold = 5;
  int32 compressorAttack = 6;
  int32 compressorRelease = 7;
  int32 compressorGain = 8;
  int32 compressorRatio = 9;
  int32 compressorHysteresis = 10;
  int32 autowahDepth = 11;
  int32 autowahWet = 12;
}

message ParamEfxOverdrive {
  int32 gain = 1;
  int32 tone = 2;
  int32 level = 3;
}

message ParamEfxDistortion {
  int32 gain = 1;
  int32 tone = 2;
  int32 level = 3;
}

message ParamEfxFuzz {
  int32 gain = 1;
  int32 tone = 2;
  int32 level = 3;
}

message ParamAmpFender {
  int32 gain = 1;
  int32 low = 2;
  int32 middle = 3;
  int32 high = 4;
}

message ParamAmpMarshall {
  int32 gain = 1;
  int32 low = 2;
  int32 middle = 3;
  int32 high = 4;
}

message ParamAmpVox {
  int32 gain = 1;
  int32 low = 2;
  int32 middle = 3;
  int32 high = 4;
}

message ParamAmpAcoustic {
  int32 gain = 1;
  int32 low = 2;
  int32 middle = 3;
  int32 high = 4;
}

message ParamIrFender { int32 wet = 1; }

message ParamIrMarshall { int32 wet = 1; }

message ParamIrVox { int32 wet = 1; }

message ParamIrAcoustic { int32 wet = 1; }

message ParamModFlange {
  int32 offset = 1;
  int32 depth = 2;
  int32 frequency = 3;
}

message ParamModChorus { int32 voices = 1; }

message ParamModTremolo {
  int32 depth = 1;
  int32 frequency = 2;
}

message ParamModPhaser {
  int32 frequency = 1;
  int32 depthTop = 2;
  int32 depthBottom = 3;
  int32 mix = 4;
  int32 feedback = 5;
  int32 stages = 6;
}

message ParamModVibrato {
  int32 frequency = 1;
  int32 depth = 2;
}

message ParamDelayDelay {
  int32 time = 1;
  int32 mix = 2;
  int32 feedback = 3;
}

message ParamReverbRoom {
  int32 roomsize = 1;
  int32 damping = 2;
  int32 wet = 3;
}

message ParamReverbHall {
  int32 roomsize = 1;
  int32 damping = 2;
  int32 wet = 3;
}

message ParamReverbPlate {
  int32 roomsize = 1;
  int32 damping = 2;
  int32 wet = 3;
}

message ParamReverbSpring {
  int32 roomsize = 1;
  int32 damping = 2;
  int32 wet = 3;
}

// App -> Guitar
enum DiagCode {
  POWER_ON_COUNT = 0;
  FIRST_PAIRING = 1;
  ERROR_CODE = 2;
}

message DiagReq { DiagCode code = 1; }

// Guitar -> App

message DiagRespPOC { int32 powerOnCount = 1; }
message DiagRespFirstParing { int64 FirstParingTimeEpoch = 1; }

message DiagRespErrCode {
  enum ErrorCode {
    DIAG_ERR_UNKNOWN_DIAG_ID = 0;
    DIAG_ERR_INVALID_DIAG_DATA = 1;
  }

  int32 errCode = 1;
}

// Save IR Request
message BulkIrStartReq {
  string irName = 1;
  int32 sequenceNumber = 2;
  repeated float data = 3;
}

message BulkIrReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

message BulkIrEndReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

// Save IR Response
message BulkIrRes {
  int32 sequenceNumber = 1;
  bool done = 2;
}
