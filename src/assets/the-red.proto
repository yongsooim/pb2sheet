/*
 the-red.proto

 2023-09-27 jason:
  - add message : ParamEfxTScreamer
  - add message : ParamEfxRatt
  - add message : ParamEfxSupremeOverdrive
  - add fields : level in ParamAmp*
  - delete fields : level in ParamCab*

 2023-09-20 jason:
  - add message : KnobMatchingAll
  - change field names : BankData.data -> categoryData
  - change field names : KnobMatching.data -> knobMatchingData

 2023-09-20 jason:
  - add message : KnobMatchingAll
  - change field names : BankData.data -> categoryData
  - change field names : KnobMatching.data -> knobMatchingData

 2023-09-19 jason:
  - add messages : CategoryData, BankData, KnobMatching

 2023-09-14 jason:
  - delete message & message ID : CurrentKnobSelected

 2023-09-11 jason:
  - add field : InitFromGuitar.receivedMessageLength
  - add field : InitFromGuitar.receivedMessageId
  - add enum : MessageID::CLEAR_EFFECTS

 2023-09-08 jason:
  - add field : Ack.receivedMessageId

 2023-09-07 jason:
  - add field : InitFromApp.knobClicked
  - add field : InitFromGuitar.isCharging
  - add message : ClearEffects

 2023-09-06 jason:
  - delete messages : Select XXX
  - add fields in Param XXX : bool isOn
  - add enum : ERROR_CODE::INVALID_PACKET_LENGTH

 2023-09-05 jason:
  - delete message : EffectEod
  - delete message : ChangeSsid
  - delete field : InitFromApp.currentTime
  - add field : InitFromGuitar.batteryLeve
  - add field : BatteryLevel.isCharging

 2023-08-30 jason:
  - delete message : ParamCabAcoustic
  - add message : ParamEfxAcoustic
  - change AMP names to F, MA, V, ME, B
  - change CAB names to A, B, C, D, E

 2023-08-29 jason:
  - change parameter names in EFX : drive -> gain
  - change parameter names in MOD : frequency -> rate
  - change parameter names : wet -> mix

 2023-08-28 jason:
  - add NACK error codes
  - add message : ParamGate
  - delete Gate messages : (ParamGateNoiseGate, ParamGateLimiter,
 ParamGateCompressor)
  - delete message : ParamEfxBitCrusher
  - delete message : ParamDelayEcho
  - change parameter name in EFX : ParamModVibrato.percent -> depth
  - change parameter name : ParamModVibrato.percent -> depth
  - change parameter name : ParamDelayDelay.gap -> time
  - change parameter name : ParamModChorus.voices -> rate
  - change parameter name "treble" to "tone" in ParamAmps (ParamAmpFender,
 ParamAmpMarshall, ParamAmpVox, ParamAmpAcoustic)
  - delete parameter "presence" in ParamAmps (ParamAmpFender, ParamAmpMarshall,
 ParamAmpVox, ParamAmpAcoustic)
  - Change and rearrange Message IDs

 2023-08-02 jason: initial version
*/
syntax = "proto3";

enum MessageID {
  ACK = 0;
  NACK = 1;
  INIT_FROM_APP = 2;
  INIT_FROM_GUITAR = 3;
  CHANGE_GUITAR_NAME = 4;
  TUNER_ON_OFF = 5;
  TUNER_FREQUENCY = 6;
  KNOB_CLICKED = 7;
  KNOB_MATCHING_START = 8;
  BATTERY_LEVEL = 9;
  PARAM_GATE = 10;
  PARAM_EFX_OVERDRIVE = 11;
  PARAM_EFX_DISTORTION = 12;
  PARAM_EFX_FUZZ = 13;
  PARAM_EFX_T_SCREAMER = 14;
  PARAM_EFX_SUPREME_OVERDRIVE = 15;
  PARAM_EFX_RATT = 16;
  PARAM_EFX_ACOUSTIC = 17;
  PARAM_AMP_F = 18;
  PARAM_AMP_MA = 19;
  PARAM_AMP_ME = 20;
  PARAM_AMP_V = 21;
  PARAM_AMP_B = 22;
  PARAM_CAB_A = 23;
  PARAM_CAB_B = 24;
  PARAM_CAB_C = 25;
  PARAM_CAB_D = 26;
  PARAM_CAB_E = 27;
  PARAM_MOD_FLANGE = 28;
  PARAM_MOD_CHORUS = 29;
  PARAM_MOD_TREMOLO = 30;
  PARAM_MOD_PHASER = 31;
  PARAM_MOD_VIBRATO = 32;
  PARAM_DELAY_DELAY = 33;
  PARAM_REVERB_ROOM = 34;
  PARAM_REVERB_HALL = 35;
  PARAM_REVERB_PLATE = 36;
  PARAM_REVERB_SPRING = 37;
  CATEGORY_DATA = 38;
  BANK_DATA = 39;
  KNOB_MATCHING = 40;
  KNOB_MATCHING_ALL = 41;
  CLEAR_EFFECTS = 42;
  DIAG_REQ = 43;
  DIAG_RESP_POC = 44;
  DIAG_RESP_FIRST_PARING = 45;
  DIAG_RESP_ERR_CODE = 46;
  BULK_IR_START_REQ = 47;
  BULK_IR_REQ = 48;
  BULK_IR_END_REQ = 49;
  BULK_IR_RES = 50;
}

enum CATEGORY_NUMBER {
  CAT_NO1_GATE = 0;
  CAT_NO2_EFX = 1;
  CAT_NO3_AMP = 2;
  CAT_NO4_CAB = 3;
  CAT_NO5_MOD = 4;
  CAT_NO6_DELAY = 5;
  CAT_NO7_REVERB = 6;
}

enum CATEGORY1_GATE_SELECT {
  GATE_GATE = 0;
  NUMBER_OF_GATE = 1;
}

enum CATEGORY2_EFX_SELECT {
  EFX_OVERDRIVE = 0;
  EFX_DISTORTION = 1;
  EFX_FUZZ = 2;
  EFX_ACOUSTIC = 3;
  NUMBER_OF_EFX = 4;
}

enum CATEGORY3_AMP_SELECT {
  AMP_F = 0;
  AMP_MA = 1;
  AMP_ME = 2;
  AMP_V = 3;
  AMP_B = 4;
  NUMBER_OF_AMP = 5;
}

enum CATEGORY4_CAB_SELECT {
  CAB_A = 0;
  CAB_B = 1;
  CAB_C = 2;
  CAB_D = 3;
  CAB_E = 4;
  NUMBER_OF_CAB = 5;
}

enum CATEGORY5_MOD_SELECT {
  MOD_FLANGE = 0;
  MOD_CHORUS = 1;
  MOD_TREMOLO = 2;
  MOD_PHASER = 3;
  MOD_VIBRATO = 4;
  NUMBER_OF_MOD = 5;
}

enum CATEGORY6_DELAY_SELECT {
  DELAY_DELAY = 0;
  NUMBER_OF_DELAY = 1;
}

enum CATEGORY7_REVERB_SELECT {
  REVERB_ROOM = 0;
  REVERB_HALL = 1;
  REVERB_PLATE = 2;
  REVERB_SPRING = 3;
  NUMBER_OF_REVERB = 4;
}

message Ack {
  int32 receivedMessageLength = 1;
  int32 receivedMessageId = 2;
}

message Nack {
  enum ERROR_CODE {
    INVALID_MESSAGE_ID = 0;
    INVALID_MESSAGE_DATA = 1;
    INVALID_STATE = 2;
    INVALID_OPCODE = 3;
    INVALID_PACKET_LENGTH = 4;
    PROTOBUF_DECODE_ERROR = 5;
    TIMEOUT = 6;
  }
  ERROR_CODE errorCode = 1;
}

message InitFromApp {
  string appVersion = 1;
  int32 KnobClicked = 2;
}

message InitFromGuitar {
  int32 receivedMessageLength = 1;
  int32 receivedMessageId = 2;
  string guitarName = 3;
  string guitarModelName = 4;
  string firmwareVersion = 5;
  int32 batteryLevel = 6;
  bool isCharging = 7;
}

message ChangeGuitarName { string guitarName = 1; }

message TunerOnOff { bool isOn = 1; }
message TunerFrequency { float tunerFrequency = 1; }

// Knob number 0 is clear
message KnobClicked { int32 knobNumber = 1; }

message KnobMatchingStart { int32 knobNumber = 1; }

message BatteryLevel {
  int32 batteryLevel = 1;
  bool isCharging = 2;
}

message ParamGate {
  bool isOn = 1;
  int32 noiseGateThreshold = 2;
  int32 noiseGateOpeningTime = 3;
  int32 noiseGateClosingTime = 4;
  int32 noiseGateHoldTime = 5;
  int32 compressorThreshold = 6;
  int32 compressorAttack = 7;
  int32 compressorRelease = 8;
  int32 compressorGain = 9;
  int32 compressorRatio = 10;
  int32 compressorHysteresis = 111;
  int32 autowahDepth = 112;
  int32 autowahMix = 113;
}

message ParamEfxOverdrive {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxDistortion {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxFuzz {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxTScreamer {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxSupremeOverdrive {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxRatt {
  bool isOn = 1;
  int32 gain = 2;
  int32 tone = 3;
  int32 level = 4;
}

message ParamEfxAcoustic {
  bool isOn = 1;
  int32 bass = 2;
  int32 middle = 3;
  int32 treble = 4;
}

message ParamAmpF {
  bool isOn = 1;
  int32 gain = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
  int32 level = 6;
}

message ParamAmpMa {
  bool isOn = 1;
  int32 gain = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
  int32 level = 6;
}

message ParamAmpMe {
  bool isOn = 1;
  int32 gain = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
  int32 level = 6;
}

message ParamAmpV {
  bool isOn = 1;
  int32 gain = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
  int32 level = 6;
}

message ParamAmpB {
  bool isOn = 1;
  int32 gain = 2;
  int32 bass = 3;
  int32 middle = 4;
  int32 treble = 5;
  int32 level = 6;
}

message ParamCabA {
  bool isOn = 1;
}
message ParamCabB {
  bool isOn = 1;
}
message ParamCabC {
  bool isOn = 1;
}
message ParamCabD {
  bool isOn = 1;
}
message ParamCabE {
  bool isOn = 1;
}

message ParamModFlange {
  bool isOn = 1;
  int32 manual = 2;
  int32 depth = 3;
  int32 rate = 4;
}

message ParamModChorus {
  bool isOn = 1;
  int32 rate = 2;
}

message ParamModTremolo {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamModPhaser {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamModVibrato {
  bool isOn = 1;
  int32 depth = 2;
  int32 rate = 3;
}

message ParamDelayDelay {
  bool isOn = 1;
  int32 time = 2;
  int32 level = 3;
  int32 feedback = 4;
}

message ParamReverbRoom {
  bool isOn = 1;
  int32 roomsize = 2;
  int32 tone = 3;
  int32 mix = 4;
}

message ParamReverbHall {
  bool isOn = 1;
  int32 roomsize = 2;
  int32 tone = 3;
  int32 mix = 4;
}

message ParamReverbPlate {
  bool isOn = 1;
  int32 roomsize = 2;
  int32 tone = 3;
  int32 mix = 4;
}

message ParamReverbSpring {
  bool isOn = 1;
  int32 roomsize = 2;
  int32 tone = 3;
  int32 mix = 4;
}

message CategoryData {
  int32 categoryNumber = 1;
  int32 select = 2;
  repeated int32 params = 3;
}

message BankData {
  repeated CategoryData categoryData = 1;
}

message KnobMatching {
  int32 knobNumber = 1;
  BankData bankData = 2;
}

message KnobMatchingAll {
  repeated KnobMatching knobMatchingData = 1;
}

message ClearEffects { bool clear = 1; }

// App -> Guitar
enum DiagCode {
  POWER_ON_COUNT = 0;
  FIRST_PAIRING = 1;
  ERROR_CODE = 2;
}

message DiagReq { DiagCode code = 1; }

// Guitar -> App

message DiagRespPOC { int32 powerOnCount = 1; }
message DiagRespFirstParing { int64 FirstParingTimeEpoch = 1; }

message DiagRespErrCode {
  enum ErrorCode {
    DIAG_ERR_UNKNOWN_DIAG_ID = 0;
    DIAG_ERR_INVALID_DIAG_DATA = 1;
  }

  int32 errCode = 1;
}

// Save IR Request
message BulkIrStartReq {
  string irName = 1;
  int32 sequenceNumber = 2;
  repeated float data = 3;
}

message BulkIrReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

message BulkIrEndReq {
  int32 sequenceNumber = 1;
  repeated float data = 2;
}

// Save IR Response
message BulkIrRes {
  int32 sequenceNumber = 1;
  bool done = 2;
}
